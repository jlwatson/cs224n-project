

I wrote a big comment in init.cpp describing how shutdown works:  
  

Code:

//  
// Thread management and startup/shutdown:  
//  
// The network-processing threads are all part of a thread group  
// created by AppInit() or the Qt main() function.  
//  
// A clean exit happens when StartShutdown() or the SIGTERM  
// signal handler sets fRequestShutdown, which triggers  
// the DetectShutdownThread(), which interrupts the main thread group.  
// DetectShutdownThread() then exits, which causes AppInit() to  
// continue (it .joins the shutdown thread).  
// Shutdown() is then  
// called to clean up database connections, and stop other  
// threads that should only be stopped after the main network-processing  
// threads have exited.  
//  
// Note that if running -daemon the parent process returns from AppInit2  
// before adding any threads to the threadGroup, so .join_all() returns  
// immediately and the parent exits from main().  
//  
// Shutdown for Qt is very similar, only it uses a QTimer to detect  
// fRequestShutdown getting set, and then does the normal Qt  
// shutdown thing.  
//  

  
I don't know nuthin about Windows' SetConsoleCtrlHandler(), but just setting
the fRequestShutdown global variable should do the right thing.  

