

I would focus on use cases.  
  
1\. Back up all the keys in a wallet, and later restore the wallet state if
the wallet is deleted or corrupted.  
  
2\. Merge two wallets by exporting all the keys in one, and importing to
another.  
  
3\. Export and remove selected keys from wallet, for moving to safe long-term
storage in case the wallet is hacked; later, move the keys back to a wallet
for spending.  
  
4\. Export selected keys for transferring their funds to someone else; the
recipient imports the keys and gains access to the funds.  
  
Any others?  
  
I wonder whether it makes sense to use bitkeys format for case 1 and 2.
Wallets do have other things, which is part of your problem. I'd suggest that
case 1 & 2 should use wallet formats.  
  
This would mean you don't have to worry about reserve keys. I'd treat the
other key classes the same.  
  
Case 3 & 4 are very similar. They suggest you should have an export-and-delete
function. Gavin suggested: 1. export key to disk file; 2. read disk file, make
sure key is there; 3. delete key from wallet.  
  
Case 4 probably should delete the exported key. You can save a copy and re-
import it if the recipient never uses it.  
  
For the case 4 import you really want to do: 1. import keys; 2. do a spend
from these keys to one of yours; 3. delete imported keys. That assures that
ownership transfers. You don't need this for case 3 import as it's your key.  
  
Finally, as far as the address and balance: I don't like putting them into CSV
fields, because they are redundant and unnecessary. Your comment fields seem
okay, but note that the balance may be out of date. How about a command that
would take a bitkeys file, and display the address and current balance? Then
you could leave the comments out.

